// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: automation_function.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AutomationFunctionService_Exec_FullMethodName = "/proto.AutomationFunctionService/Exec"
	AutomationFunctionService_Meta_FullMethodName = "/proto.AutomationFunctionService/Meta"
)

// AutomationFunctionServiceClient is the client API for AutomationFunctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutomationFunctionServiceClient interface {
	Exec(ctx context.Context, in *ExecReq, opts ...grpc.CallOption) (*ExecResp, error)
	Meta(ctx context.Context, in *MetaReq, opts ...grpc.CallOption) (*AutomationFunction, error)
}

type automationFunctionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutomationFunctionServiceClient(cc grpc.ClientConnInterface) AutomationFunctionServiceClient {
	return &automationFunctionServiceClient{cc}
}

func (c *automationFunctionServiceClient) Exec(ctx context.Context, in *ExecReq, opts ...grpc.CallOption) (*ExecResp, error) {
	out := new(ExecResp)
	err := c.cc.Invoke(ctx, AutomationFunctionService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationFunctionServiceClient) Meta(ctx context.Context, in *MetaReq, opts ...grpc.CallOption) (*AutomationFunction, error) {
	out := new(AutomationFunction)
	err := c.cc.Invoke(ctx, AutomationFunctionService_Meta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutomationFunctionServiceServer is the server API for AutomationFunctionService service.
// All implementations must embed UnimplementedAutomationFunctionServiceServer
// for forward compatibility
type AutomationFunctionServiceServer interface {
	Exec(context.Context, *ExecReq) (*ExecResp, error)
	Meta(context.Context, *MetaReq) (*AutomationFunction, error)
	mustEmbedUnimplementedAutomationFunctionServiceServer()
}

// UnimplementedAutomationFunctionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAutomationFunctionServiceServer struct {
}

func (UnimplementedAutomationFunctionServiceServer) Exec(context.Context, *ExecReq) (*ExecResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedAutomationFunctionServiceServer) Meta(context.Context, *MetaReq) (*AutomationFunction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Meta not implemented")
}
func (UnimplementedAutomationFunctionServiceServer) mustEmbedUnimplementedAutomationFunctionServiceServer() {
}

// UnsafeAutomationFunctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutomationFunctionServiceServer will
// result in compilation errors.
type UnsafeAutomationFunctionServiceServer interface {
	mustEmbedUnimplementedAutomationFunctionServiceServer()
}

func RegisterAutomationFunctionServiceServer(s grpc.ServiceRegistrar, srv AutomationFunctionServiceServer) {
	s.RegisterService(&AutomationFunctionService_ServiceDesc, srv)
}

func _AutomationFunctionService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationFunctionServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationFunctionService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationFunctionServiceServer).Exec(ctx, req.(*ExecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationFunctionService_Meta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationFunctionServiceServer).Meta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationFunctionService_Meta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationFunctionServiceServer).Meta(ctx, req.(*MetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AutomationFunctionService_ServiceDesc is the grpc.ServiceDesc for AutomationFunctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutomationFunctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AutomationFunctionService",
	HandlerType: (*AutomationFunctionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _AutomationFunctionService_Exec_Handler,
		},
		{
			MethodName: "Meta",
			Handler:    _AutomationFunctionService_Meta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "automation_function.proto",
}
