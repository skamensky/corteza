name: "Release"

# These jobs can be tested with nektos/act tool
# https://github.com/nektos/act
#
# Look for "!env.ACT" in the DRY_RUN expression below

on:
  push:
    branches:
      - '2023.3.x-poc-cp'

env:
  BUILD_OS: linux
  BUILD_ARCH: amd64

  GO_VERSION: 1.19
  GOFLAGS: -mod=readonly

  NODE_VERSION: 16

  RELEASE_BASE_URL: "https://releases.cortezaproject.org/files"

  MAIN_VERSION: 2023.3.3

jobs:
  # Building web console for server and cache it for release-* steps
  # we'll do this in parallel with tests to gain a few seconds
  server-web-console-build:
    name: "Server Web Console Build"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: "${{ env.NODE_VERSION }}" }
      - uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.OS }}-node-
      - name: "Setup YARN"
        run: npm install -g yarn @vue/cli-service
      - name: "Install dependencies"
        working-directory: server/webconsole
        run: yarn install
      - name: "Build Package"
        working-directory: server/webconsole
        run: yarn build
      - name: "Cache console build"
        uses: actions/cache@v3
        with: { path: ./server/webconsole/dist, key: console-build }

  server-release:
    name: "Server Release (${{ matrix.os }})"
    strategy:
      fail-fast: true
      matrix:
        include:
          - { runsOn: "ubuntu-20.04", os: "linux" }
    runs-on: ${{ matrix.runsOn }}
    needs: [ server-web-console-build ]
    env:
      BUILD_OS: ${{ matrix.os }}
      RELEASE_SFTP_KEY: ${{ secrets.RELEASE_SFTP_KEY }}
      RELEASE_SFTP_URI: ${{ secrets.RELEASE_SFTP_URI }}
    steps:
      - run: echo "BUILD_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with: { go-version: "${{ env.GO_VERSION }}" }
      - name: "Restore web console dist from cache"
        uses: actions/cache@v3
        with: { path: ./server/webconsole/dist, key: console-build }
      - name: "Copy essentials"
        run: cp *.md DCO LICENSE server/
      - name: "Copy language files"
        working-directory: server/pkg/locale
        run: make src/en src/de src/fr
      - name: "Build"
        working-directory: server
        run: make release-clean release
      - name: "Upload"
        working-directory: server
        run: make upload
        if: ${{ !env.ACT }}

########################################################################################################################
########################################################################################################################
# This is where it all comes together


  release:
    name: "Corteza (${{ matrix.os }})"
    runs-on: ubuntu-20.04
    needs: [ server-release ]
    strategy:
      fail-fast: true
      matrix:
        os: [ "linux" ]
    env:
      ENDPOINT: https://releases.cortezaproject.org/files
      RELEASE_SFTP_KEY: ${{ secrets.RELEASE_SFTP_KEY }}
      RELEASE_SFTP_URI: ${{ secrets.RELEASE_SFTP_URI }}
    steps:
      - run: echo "BUILD_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - name: "Download"
        run: |
          curl --silent --location "${{ env.RELEASE_BASE_URL }}/corteza-server-${{ env.BUILD_VERSION }}-${{ matrix.os }}-amd64.tar.gz" | \
            tar -xzmok -C .
          mv corteza-server dist
          rm -rf dist/webapp
          mkdir dist/webapp
          curl --silent --location "${{ env.RELEASE_BASE_URL }}/corteza-webapp-${{ env.MAIN_VERSION }}.tar.gz" | \
            tar -xzmok -C dist/webapp
      - name: "Pack"
        run: |
          tar -C dist -czf corteza-${{ env.BUILD_VERSION }}-linux-amd64.tar.gz $(dir dist)
      - name: "Upload"
        run: |
          echo ${{ env.RELEASE_SFTP_KEY }} | base64 -d > .upload-rsa
          chmod 0400 .upload-rsa
          echo "put corteza-${{ env.BUILD_VERSION }}-linux-amd64.tar.gz" | \
            sftp -q -o "StrictHostKeyChecking no" -i .upload-rsa ${{ env.RELEASE_SFTP_URI }}
          rm -f .upload-rsa
        if: ${{ !env.ACT }}


########################################################################################################################


  docker-images:
    name: "Docker image ${{ matrix.image }}"

    runs-on: ubuntu-20.04
    needs:
      - server-release
    strategy:
      fail-fast: true
      matrix:
        include:
          - { context: ".",                          image: "cortezaproject/corteza" }

    steps:
      - uses: actions/checkout@v3
      - name: "Parse version tag"
        id: version
        run: |
          TAG=${GITHUB_REF##*/}

          echo "DOCKER_IMAGE_TAG=${TAG}" >> $GITHUB_ENV
      - name: "Build"
        run: |
          docker build \
            --build-arg "VERSION=${{ env.DOCKER_IMAGE_TAG }}" \
            --tag ghcr.io/${{ matrix.image }}:${{ env.DOCKER_IMAGE_TAG }} \
            ${{ matrix.context }}

      - name: "Login"
        uses: docker/login-action@v2
        if: ${{ !env.ACT && env.DOCKER_IMAGE_TAG }}
        with:
          registry: ghcr.io
          username: ${{secrets.GHCR_TOKEN_USER}}
          password: ${{secrets.GHCR_TOKEN_SECRET}}
      
      - name: "Push ${{ env.DOCKER_IMAGE_TAG }}"
        if: ${{ !env.ACT }}
        run: |
          docker push \
            ghcr.io/${{ matrix.image }}:${{ env.DOCKER_IMAGE_TAG }}
